// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pandoc.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PandocServiceClient is the client API for PandocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PandocServiceClient interface {
	ConvertText(ctx context.Context, in *ConvertTextRequest, opts ...grpc.CallOption) (*ConvertTextResponse, error)
}

type pandocServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPandocServiceClient(cc grpc.ClientConnInterface) PandocServiceClient {
	return &pandocServiceClient{cc}
}

func (c *pandocServiceClient) ConvertText(ctx context.Context, in *ConvertTextRequest, opts ...grpc.CallOption) (*ConvertTextResponse, error) {
	out := new(ConvertTextResponse)
	err := c.cc.Invoke(ctx, "/pandoc.PandocService/ConvertText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PandocServiceServer is the server API for PandocService service.
// All implementations must embed UnimplementedPandocServiceServer
// for forward compatibility
type PandocServiceServer interface {
	ConvertText(context.Context, *ConvertTextRequest) (*ConvertTextResponse, error)
	mustEmbedUnimplementedPandocServiceServer()
}

// UnimplementedPandocServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPandocServiceServer struct {
}

func (UnimplementedPandocServiceServer) ConvertText(context.Context, *ConvertTextRequest) (*ConvertTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertText not implemented")
}
func (UnimplementedPandocServiceServer) mustEmbedUnimplementedPandocServiceServer() {}

// UnsafePandocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PandocServiceServer will
// result in compilation errors.
type UnsafePandocServiceServer interface {
	mustEmbedUnimplementedPandocServiceServer()
}

func RegisterPandocServiceServer(s grpc.ServiceRegistrar, srv PandocServiceServer) {
	s.RegisterService(&PandocService_ServiceDesc, srv)
}

func _PandocService_ConvertText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PandocServiceServer).ConvertText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pandoc.PandocService/ConvertText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PandocServiceServer).ConvertText(ctx, req.(*ConvertTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PandocService_ServiceDesc is the grpc.ServiceDesc for PandocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PandocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pandoc.PandocService",
	HandlerType: (*PandocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertText",
			Handler:    _PandocService_ConvertText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pandoc.proto",
}
